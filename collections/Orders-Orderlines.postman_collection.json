{
	"info": {
		"_postman_id": "a382248c-9924-40f9-8099-feddfc06ba4c",
		"name": "Orders-Orderlines",
		"description": "Tests for orders and orderlines",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST-orders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6ae36f92-9831-4a4a-9312-9c47a6f60c32",
						"exec": [
							"if(!pm.environment.has(\"orderFakeData\")){\r",
							"    let orderFakeData=[\r",
							"        {\r",
							"        \"date\": \"2020-05-24 13:22:10\", \r",
							"        \"client_email\":\"jsandeford2@ihg.com\"\r",
							"        },\r",
							"        {\r",
							"        \"date\": \"2020-05-19 23:53:23\", \r",
							"        \"client_email\":\"aanscombe5@shutterfly.com\"\r",
							"        },\r",
							"        {\r",
							"        \"date\": \"2020-05-21 21:26:06\", \r",
							"        \"client_email\":\"mhurdisc@ow.ly\"\r",
							"        },\r",
							"        {\r",
							"        \"date\": \"2020-05-23 21:55:08\", \r",
							"        \"client_email\":\"aforseithe@xing.com\"\r",
							"        },\r",
							"        {\r",
							"        \"date\": \"2020-05-22 08:31:14\", \r",
							"        \"client_email\":\"vballach0@jigsy.com\"\r",
							"        }\r",
							"    ]; \r",
							"    pm.environment.set(\"orderCounter\", 0);\r",
							"    pm.environment.set(\"orderFakeData\", JSON.stringify(orderFakeData));\r",
							"\r",
							"}\r",
							"\r",
							"let orderCounter = pm.environment.get(\"orderCounter\") / 1;\r",
							"let orderFakeData = JSON.parse(pm.environment.get(\"orderFakeData\"));\r",
							"let {date, client_email} = orderFakeData[orderCounter]\r",
							"\r",
							"pm.environment.set('date', date);\r",
							"pm.environment.set('client_email', client_email);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5b5e7a97-baa1-461c-85c8-357220e215a6",
						"exec": [
							"let response = pm.response.json();\r",
							"let orderCounter = pm.environment.get(\"orderCounter\") / 1;\r",
							"let orderFakeData = JSON.parse(pm.environment.get(\"orderFakeData\"));\r",
							"\r",
							"orderFakeData[orderCounter].id = response.insertId;\r",
							"pm.environment.set('orderFakeData', JSON.stringify(orderFakeData));\r",
							"\r",
							"pm.test(\"Something in the response\", function () {\r",
							"    pm.expect(response).to.not.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct status\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"orderCounter++;\r",
							"pm.environment.set('orderCounter', orderCounter);\r",
							"\r",
							"if(orderCounter===3){\r",
							"    orderCounter=0;\r",
							"}\r",
							"\r",
							"if(orderFakeData[orderCounter]){\r",
							"    postman.setNextRequest('POST-orders')\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"date\":\"{{date}}\",\n\t\"client_email\":\"{{client_email}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"orders"
					]
				},
				"description": "Tests for POST orders"
			},
			"response": []
		},
		{
			"name": "GET-orders",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"orders"
					]
				},
				"description": "Tests for GET orders"
			},
			"response": []
		},
		{
			"name": "GET-orderlines",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/orderlines",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"orderlines"
					]
				},
				"description": "Tests for GET orderlines"
			},
			"response": []
		},
		{
			"name": "POST-orderlines",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "626a0c25-e5ac-49a1-a09e-0ee06a1b11d3",
						"exec": [
							"if(!pm.environment.has(\"orderLineFakeData\")){\r",
							"    let orderLineFakeData=[\r",
							"        {\r",
							"        \"amount\":\"2\", \r",
							"        \"book_ISBN_nr\":\"614823801-2\"\r",
							"        },\r",
							"        {\r",
							"        \"amount\":\"1\", \r",
							"        \"book_ISBN_nr\":\"735896022-X\"\r",
							"        },\r",
							"        {\r",
							"        \"amount\":\"5\", \r",
							"        \"book_ISBN_nr\":\"335339993-3\"\r",
							"        },\r",
							"        {\r",
							"        \"amount\":\"1\", \r",
							"        \"book_ISBN_nr\":\"101032032-7\"\r",
							"        },\r",
							"\r",
							"    ]; \r",
							"    pm.environment.set(\"orderLineCounter\", 0);\r",
							"    pm.environment.set(\"orderLineFakeData\", JSON.stringify(orderLineFakeData));\r",
							"\r",
							"}\r",
							"\r",
							"let orderLineCounter = pm.environment.get(\"orderLineCounter\") / 1;\r",
							"let orderLineFakeData = JSON.parse(pm.environment.get(\"orderLineFakeData\"));\r",
							"let {amount, book_ISBN_nr} = orderLineFakeData[orderLineCounter]\r",
							"\r",
							"pm.environment.set('amount', amount);\r",
							"pm.environment.set('book_ISBN_nr', book_ISBN_nr);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "55adc5de-328a-46f5-ba7b-d669e79267e2",
						"exec": [
							"let response = pm.response.json();\r",
							"let orderLineCounter = pm.environment.get(\"orderLineCounter\") / 1;\r",
							"let orderLineFakeData = JSON.parse(pm.environment.get(\"orderLineFakeData\"));\r",
							"\r",
							"orderLineFakeData[orderLineCounter].id = response.insertId;\r",
							"pm.environment.set('orderLineFakeData', JSON.stringify(orderLineFakeData));\r",
							"\r",
							"pm.test(\"Something in the response\", function () {\r",
							"    pm.expect(response).to.not.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct status\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"orderLineCounter++;\r",
							"pm.environment.set('orderLineCounter', orderLineCounter);\r",
							"\r",
							"//Lägger in så man kan köra om testen i en collection runner utan att SQLite säger ifrån.\r",
							"if(orderLineCounter===3){\r",
							"    orderLineCounter=0;\r",
							"}\r",
							"\r",
							"if(orderLineFakeData[orderLineCounter]){\r",
							"    postman.setNextRequest('POST-orderlines')\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"amount\":\"{{amount}}\",\n\t\"book_ISBN_nr\":\"{{book_ISBN_nr}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/orderlines",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"orderlines"
					]
				},
				"description": "Tests for POST orderlines"
			},
			"response": []
		},
		{
			"name": "GET-lastOrder",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "da6987bd-9e48-4f9a-a29b-7f340c0e4c95",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3f1fffb5-91ee-43c8-b166-b536f7ab3ced",
						"exec": [
							"let response = pm.response.json();\r",
							"let lastOrder= response.pop();\r",
							"\r",
							"let lastOrderId=lastOrder.id;\r",
							"pm.environment.set('lastOrderId', lastOrderId);\r",
							"\r",
							"pm.test('Correct status', function (){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('ID exists', function(){\r",
							"    pm.expect(lastOrderId).to.exist; \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE-orders",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c9a1309d-3a64-4679-afda-4fc3e350d074",
						"exec": [
							"if(!pm.environment.has(\"lastOrderId\")){\r",
							"    postman.setNextRequest(\"GET-lastOrder\");\r",
							"}\r",
							"\r",
							"pm.environment.set(\"lastOrderId\", pm.environment.get(\"lastOrderId\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b059a7a5-5787-40c3-8d16-429d1748ac2d",
						"exec": [
							"let response = pm.response.json();\r",
							"let lastOrderID = pm.environment.get(\"lastOrderId\");\r",
							"\r",
							"pm.test('correct change', function (){\r",
							"    pm.expect(response.changes).to.equal(1);\r",
							"});\r",
							"\r",
							"pm.test('Correct status', function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Correct lastID', function(){\r",
							"    pm.expect(response.lastID).to.equal(lastOrderID);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/orders/{{lastOrderId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"orders",
						"{{lastOrderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET-lastOrderline",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de0bb8a4-37f3-4434-afc6-c2d59a4c63c8",
						"exec": [
							"let response = pm.response.json();\r",
							"let lastOrderline= response.pop();\r",
							"\r",
							"let lastOrderlineId=lastOrderline.id;\r",
							"pm.environment.set('lastOrderlineId', lastOrderlineId);\r",
							"\r",
							"pm.test('Correct status', function (){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('ID exists', function(){\r",
							"    pm.expect(lastOrderlineId).to.exist; \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/orderlines",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"orderlines"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE-orderlines",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "099afafe-4fca-4986-8345-535b161d2cc6",
						"exec": [
							"if(!pm.environment.has(\"lastOrderlineId\")){\r",
							"    postman.setNextRequest(\"GET-lastOrderline\");\r",
							"}\r",
							"\r",
							"pm.environment.set(\"lastOrderlineId\", pm.environment.get(\"lastOrderlineId\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3fc64626-05a7-4418-8bd8-367e0c87f66e",
						"exec": [
							"let response = pm.response.json();\r",
							"let lastOrderlineID = pm.environment.get(\"lastOrderlineId\");\r",
							"\r",
							"pm.test('correct change', function (){\r",
							"    pm.expect(response.changes).to.equal(1);\r",
							"});\r",
							"\r",
							"pm.test('Correct status', function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Correct lastID', function(){\r",
							"    pm.expect(response.lastID).to.equal(lastOrderlineID);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/orderlines/{{lastOrderlineId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"orderlines",
						"{{lastOrderlineId}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}