{
	"info": {
		"_postman_id": "97d2a2aa-22db-4b12-8ee0-745db6df909f",
		"name": "Books",
		"description": "Everything with books",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST-books",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa642f12-0ef6-4b7e-a857-482cbb8fa77e",
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"\r",
							"// Add the inserted id to the mockData and save to environment\r",
							"mockData[counter].id = response.lastID;\r",
							"pm.environment.set('mockData', JSON.stringify(mockData));\r",
							"\r",
							"\r",
							"pm.test(\"Correct status\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(mockData[counter]){\r",
							"    postman.setNextRequest(\"POST-books\");\r",
							"    \r",
							"\r",
							"}\r",
							"// Otherwise reset the counter\r",
							"// (for the next request that will reuse the mockdata)\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0); } "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "131e901e-1af3-4e80-a32d-7eb6f2e7bd00",
						"exec": [
							"if (!pm.environment.has(\"mockData\")) {\r",
							"  \r",
							"    let mockData = [\r",
							"      \r",
							"      {\r",
							"        \"ISBN_nr\": \"912585033-3\", \r",
							"        \"title\": \"Fem på rymmen\", \r",
							"        \"description\": \"Justo, lacinia eget, tincidunt eget, tempus vel, pede.\\n\\nMorbi porttitor lorem id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 430, \r",
							"        \"price\": 70\r",
							"      },\r",
							"      {\r",
							"        \"ISBN_nr\": \"9193355022-1\", \r",
							"        \"title\": \"Sex ben på en insekt\", \r",
							"        \"description\": \"Integer tincidunt ante vel ipsum. Praesent blandit lacinia erat. Vestibulum sed id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 350, \r",
							"        \"price\": 2525\r",
							"      },\r",
							"      {\r",
							"        \"ISBN_nr\": \"919485024-1\",\r",
							"        \"title\": \"Sju års olycka\", \r",
							"        \"description\": \"Lorem id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 250, \r",
							"        \"price\": 5252},\r",
							"        {\r",
							"        \"ISBN_nr\": \"919525053-1\",\r",
							"        \"title\": \"Åtta åttor\", \r",
							"        \"description\": \"Luspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\",\r",
							"        \"pages\": 25, \"price\": 2424}\r",
							"        \r",
							"];\r",
							"    pm.environment.set(\"counter\", 0);\r",
							"    pm.environment.set(\"mockData\", JSON.stringify(mockData));\r",
							" }\r",
							"\r",
							" // Reading/parsing environment variables back to local variables\r",
							" let counter = pm.environment.get(\"counter\") / 1;\r",
							" let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							" let {ISBN_nr,title,description,pages,price} = mockData[counter]\r",
							" // Save to environemnt for use in query\r",
							" pm.environment.set('ISBN_nr', ISBN_nr);\r",
							" pm.environment.set('title', title);\r",
							" pm.environment.set('description', description);\r",
							" pm.environment.set('pages', pages);\r",
							" pm.environment.set('price', price);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ISBN_nr\": \"{{ISBN_nr}}\",\r\n  \"title\": \"{{title}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"pages\": \"{{pages}}\",\r\n  \"price\": \"{{price}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books"
					]
				},
				"description": "6 correct 2 bad"
			},
			"response": []
		},
		{
			"name": "POST-books negative test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14ccae1b-2416-4eb0-9877-ceb5ad54e69c",
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"\r",
							"// Add the inserted id to the mockData and save to environment\r",
							"mockData[counter].id = response.lastID;\r",
							"pm.environment.set('mockData', JSON.stringify(mockData));\r",
							"\r",
							"/*\r",
							"if(counter===0){\r",
							"    pm.test('Constraint message when trying to omit ISBN', function () {\r",
							"        pm.expect(response.errno).to.equal(19)\r",
							"    });\r",
							"}\r",
							"\r",
							"if(counter===1){\r",
							"    pm.test('Message when not having unique ISBN', function () {\r",
							"        pm.expect(response.type).to.equal(\"entity.parse.failed\")\r",
							"    });\r",
							"}\r",
							"\r",
							"if(counter===2){\r",
							"    pm.test('Message when no price', function () {\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}\r",
							"\r",
							"if(counter===3){\r",
							"    pm.test('Message when no title', function () {\r",
							"        pm.expect(response.errno).to.equal(19)\r",
							"    });\r",
							"}\r",
							"\r",
							"if(counter===4){\r",
							"    pm.test('Message when no price', function () {\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}\r",
							"*/\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(mockData[counter]){\r",
							"    postman.setNextRequest(\"POST-books negative test\");\r",
							"}\r",
							"// Otherwise reset the counter\r",
							"// (for the next request that will reuse the mockdata)\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0); } "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "760aa6c4-be92-4c77-98c1-085355433eae",
						"exec": [
							"if (!pm.environment.has(\"mockData\")) {\r",
							"  \r",
							"    let mockData = [\r",
							"     /* {  //utan isbn\r",
							"          \"title\": \"Ettan på rymmen\",\r",
							"          \"description\": \"Integer tincidunt ante vel ipsum. Praesent blandit lacinia erat. Vestibulum sed magna tempus sit amet, sem.\",\r",
							"          \"pages\": \"3500\", \r",
							"          \"price\": \"400\"\r",
							"        },\r",
							"       //dubblett isbn, ej unikt alltså\r",
							"        { \"ISBN_nr\": \"335339993-3\",\r",
							"            \"title\": \"Tvån hoppade jag över\",\r",
							"            \"description\": \"Integer tincidunt ante vel ipsum. Praesent blandit lacinia erat. Vestibulum sed magna at nunc commodo placerat.\\n\\nPraesent blandit. Nam nulla. Integer pede justo, lacinia eget, tincidunt eget, tempus vel, pede.\\n\\nMorbi porttitor lorem id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\",\r",
							"            \"pages\": \"4980\",\r",
							"            \"price\": \"1571.77\"\r",
							"        }, */\r",
							"        { //utan pris\r",
							"        \"ISBN_nr\": \"819485033-1\", \r",
							"        \"title\": \"Tre kan man inte leka\", \r",
							"        \"description\": \"Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 350\r",
							"        },\r",
							"      \r",
							"/*\r",
							"        {//utan titel\r",
							"        \"ISBN_nr\": \"749485033-X\", \r",
							"        \"description\": \"4Commodo placerat.\\n\\nPraesent blandit. Nam nulla. Integer pede justo, lacinia eget, tincidunt eget, tempus vel, pede.\\n\\nMorbi porttitor lorem id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\",\r",
							"         \"pages\": 4252, \r",
							"         \"price\": 4000\r",
							"      }\r",
							"  */      \r",
							"];\r",
							"    pm.environment.set(\"counter\", 0);\r",
							"    pm.environment.set(\"mockData\", JSON.stringify(mockData));\r",
							" }\r",
							"\r",
							" // Reading/parsing environment variables back to local variables\r",
							" let counter = pm.environment.get(\"counter\") / 1;\r",
							" let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							" let {ISBN_nr,title,description,pages,price} = mockData[counter]\r",
							" // Save to environemnt for use in query\r",
							" pm.environment.set('ISBN_nr', ISBN_nr);\r",
							" pm.environment.set('title', title);\r",
							" pm.environment.set('description', description);\r",
							" pm.environment.set('pages', pages);\r",
							" pm.environment.set('price', price);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ISBN_nr\": \"{{ISBN_nr}}\",\r\n  \"title\": \"{{title}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"pages\": \"{{pages}}\",\r\n  \"price\": \"{{price}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books"
					]
				},
				"description": "6 correct 2 bad"
			},
			"response": []
		},
		{
			"name": "GET BOOKS",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/books/79",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books",
						"79"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}