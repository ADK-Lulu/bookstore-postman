{
	"info": {
		"_postman_id": "97d2a2aa-22db-4b12-8ee0-745db6df909f",
		"name": "Books",
		"description": "Everything with books",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST-books",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa642f12-0ef6-4b7e-a857-482cbb8fa77e",
						"exec": [
							"let response = pm.response.json();\r",
							"console.log(response)\r",
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"\r",
							"// Add the inserted id to the mockData and save to environment\r",
							"mockData[counter].id= response.lastID;\r",
							"\r",
							"pm.environment.set('mockData', JSON.stringify(mockData));\r",
							"\r",
							"pm.test(\"Correct status\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(mockData[counter]){\r",
							"    postman.setNextRequest(\"POST-books\");\r",
							"}\r",
							"// Otherwise reset the counter\r",
							"// (for the next request that will reuse the mockdata)\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0); } "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "131e901e-1af3-4e80-a32d-7eb6f2e7bd00",
						"exec": [
							"if (!pm.environment.has(\"mockData\")) {\r",
							"  \r",
							"    let mockData = [\r",
							"      \r",
							"      {\r",
							"        \"ISBN_nr\": \"9193359099-1\", \r",
							"        \"title\": \"Fem laxar i en laxtunna\", \r",
							"        \"description\": \"Integer tincidunt ante vel ipsum. Praesent blandit lacinia erat. Vestibulum sed id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 444, \r",
							"        \"price\": 2222\r",
							"        },\r",
							"      {\r",
							"        \"ISBN_nr\": \"9193355022-1\", \r",
							"        \"title\": \"Sex ben på en insekt\", \r",
							"        \"description\": \"Integer tincidunt ante vel ipsum. Praesent blandit lacinia erat. Vestibulum sed id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 350, \r",
							"        \"price\": 2525\r",
							"      },\r",
							"      {\r",
							"        \"ISBN_nr\": \"919485024-1\",\r",
							"        \"title\": \"Sju års olycka\", \r",
							"        \"description\": \"Lorem id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 250, \r",
							"        \"price\": 5252},\r",
							"        \r",
							"        {\r",
							"       \r",
							"        \"ISBN_nr\": \"91933099-1\", \r",
							"        \"title\": \"#%&/?üÛøæĚñ@£$âçÙĆžƀŵ\", \r",
							"        \"description\": \"Integer tincidunt ante vel ipsum. Praesent blandit lacinia erat. Vestibulum sed id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 444, \r",
							"        \"price\": 2222\r",
							"        },\r",
							"\r",
							"        {\r",
							"        \"ISBN_nr\": \"919525053-1\",\r",
							"        \"title\": \"Åtta åttor\", \r",
							"        \"description\": \"Luspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\",\r",
							"        \"pages\": 25, \"price\": 2424}\r",
							"\r",
							"         \r",
							"        \r",
							"];\r",
							"    pm.environment.set(\"counter\", 0);\r",
							"    pm.environment.set(\"mockData\", JSON.stringify(mockData));\r",
							" }\r",
							"\r",
							" // Reading/parsing environment variables back to local variables\r",
							" let counter = pm.environment.get(\"counter\") / 1;\r",
							" let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							" let {ISBN_nr,title,description,pages,price} = mockData[counter]\r",
							" // Save to environemnt for use in query\r",
							" pm.environment.set('ISBN_nr', ISBN_nr);\r",
							" pm.environment.set('title', title);\r",
							" pm.environment.set('description', description);\r",
							" pm.environment.set('pages', pages);\r",
							" pm.environment.set('price', price);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ISBN_nr\": \"{{ISBN_nr}}\",\r\n  \"title\": \"{{title}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"pages\": \"{{pages}}\",\r\n  \"price\": \"{{price}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books"
					]
				},
				"description": "4 good ones"
			},
			"response": []
		},
		{
			"name": "GET BOOKS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a301b215-3544-49c3-b0b7-5dec4ba63392",
						"exec": [
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"let {id} = mockData[counter]\r",
							" \r",
							"  // Save to environment variable to use in the request\r",
							"  pm.environment.set('id', id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "abe55f5b-7d6b-4714-a559-6d8dcd506f2a",
						"exec": [
							"let response = pm.response.json();\r",
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"\r",
							"pm.test('The data in db should include the new mockdata', function(){\r",
							"     pm.expect(response).to.deep.include(mockData[counter]);\r",
							"});\r",
							"\r",
							"let id= mockData[counter].id;\r",
							"\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"pm.environment.set('id',id)\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(mockData[counter]){\r",
							"    postman.setNextRequest('GET BOOKS');\r",
							"}\r",
							"\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0); } "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT-books",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "26c289bb-4c5c-4a69-9838-18bd1b2e3014",
						"exec": [
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"let id = mockData[counter].id\r",
							"mockData.map(x=>x.price=10)\r",
							"let {ISBN_nr,title,description,pages,price} = mockData[counter]\r",
							" \r",
							"pm.environment.set('id',id);\r",
							"\r",
							"pm.environment.set('price',price)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ba8de4ee-c953-41a4-9769-f8ef6c422930",
						"exec": [
							"let response = pm.response.json();\r",
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"let id=pm.environment.get(\"id\");\r",
							"\r",
							"pm.test(\"Correct status\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"if(counter===4){\r",
							"    pm.test('Predicted lastID', function(){\r",
							"        pm.expect(response.lastID).to.equal(id);\r",
							"    })\r",
							"}\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(mockData[counter]){\r",
							"    postman.setNextRequest('PUT-books');\r",
							"}\r",
							"\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0); } "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"price\": \"{{price}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE-books",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "57e0e8ac-ecf6-473d-8aad-d271fb4327bf",
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"let id=pm.environment.get(\"id\");\r",
							"\r",
							"pm.test(\"Correct status\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"if(counter===4){\r",
							"    pm.test('Predicted lastID', function(){\r",
							"        pm.expect(response.lastID).to.equal(id);\r",
							"    })\r",
							"}\r",
							"\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(mockData[counter]){\r",
							"    postman.setNextRequest('DELETE-books');\r",
							"}\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0);\r",
							"  pm.environment.unset(\"id\") } "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8f66196f-9045-46fd-8474-e023409f4f99",
						"exec": [
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"let {id} = mockData[counter]\r",
							"\r",
							" \r",
							"  // Save to environment variable to use in the request\r",
							"  pm.environment.set('id', id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				},
				"description": "6 correct 2 bad"
			},
			"response": []
		},
		{
			"name": "GET BOOKS after delete",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "01888770-20d2-4207-93ab-95eb47fa5df5",
						"exec": [
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"let {id} = mockData[counter]\r",
							" \r",
							"  // Save to environment variable to use in the request\r",
							"  pm.environment.set('id', id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a1fe7ef8-9daa-4144-b8ae-48c8fd010fe0",
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let mockData = JSON.parse(pm.environment.get(\"mockData\"));\r",
							"\r",
							"pm.test('The data in db should not have the new mockdata any longer', function(){\r",
							"    pm.expect(response).to.be.an('array').that.is.empty;\r",
							"});\r",
							"\r",
							"let id= mockData[counter].id;\r",
							"\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"pm.environment.set('id',id)\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(mockData[counter]){\r",
							"    postman.setNextRequest('GET BOOKS after delete');\r",
							"}\r",
							"\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0); } "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST-books negative test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14ccae1b-2416-4eb0-9877-ceb5ad54e69c",
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let badMockData = JSON.parse(pm.environment.get(\"badMockData\"));\r",
							"\r",
							"\r",
							"console.log(response, \" \", counter)\r",
							"\r",
							"// Add the inserted id to the mockData and save to environment\r",
							"badMockData[counter].id = response.lastID;\r",
							"pm.environment.set('badMockData', JSON.stringify(badMockData));\r",
							"\r",
							"//HITTAD BUGG I API\r",
							"if(counter===0){\r",
							"    pm.test('Constraint message when trying to omit ISBN', function () {\r",
							"        pm.expect(response.errno, 'BUGG!!! Absent constraint message while inputdata without ISBN').to.equal(19)\r",
							"    });\r",
							"}\r",
							"\r",
							"if(counter===1){\r",
							"    pm.test('Message when not having unique ISBN', function () {\r",
							"        pm.expect(response.type, \"Expected to get entity-parse-failed message.\").to.equal(\"entity.parse.failed\")\r",
							"    });\r",
							"}\r",
							"//HITTAT BUGG I API\r",
							"if(counter===2){\r",
							"    pm.test('Message when no price', function () {\r",
							"        pm.expect(response.errno, 'BUGG!!! No error message when trying to give input without price').to.equal(19);\r",
							"    });\r",
							"}\r",
							"\r",
							"if(counter===3){\r",
							"    pm.test('Message when no title', function () {\r",
							"       pm.expect(response.type, \"No error message while inputdata lacked title\").to.equal(\"entity.parse.failed\");\r",
							"    });\r",
							"}\r",
							"\r",
							"//BUGG I API - kanske, ifall man tycker den ska ha koll på kontrollsiffra\r",
							"if(counter===4){\r",
							"    pm.test('Constraint message when trying to isbn without control digit', function () {\r",
							"        pm.expect(response.errno, 'BUGG!! Absent constraint message while inputdata with ISBN-nr without controll digit').to.equal(19)\r",
							"    });\r",
							"}\r",
							"\r",
							"//BUGG I API - kanske, ifall man tycker den ska ha koll så att man inte matar in för långa ISBN\r",
							"if(counter===5){\r",
							"    pm.test('Constraint message when trying to use isbn with to many digits', function () {\r",
							"        pm.expect(response.errno, 'BUGG!! Absent constraint message while inputdata with to long ISBN').to.equal(19)\r",
							"    });\r",
							"}\r",
							"\r",
							"//BUGG? Det går att mata in sidantal med decimaler\r",
							"if(counter===6){\r",
							"    pm.test('Constraint message when trying to input pages with decimals', function () {\r",
							"        pm.expect(response.errno, 'BUGG!! Absent constraint message while inputdata with decimals for pages').to.equal(19)\r",
							"    });\r",
							"}\r",
							"\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(badMockData[counter]){\r",
							"    postman.setNextRequest(\"POST-books negative test\");\r",
							"}\r",
							"// Otherwise reset the counter\r",
							"// (for the next request that will reuse the mockdata)\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0); } "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "760aa6c4-be92-4c77-98c1-085355433eae",
						"exec": [
							"if (!pm.environment.has(\"badMockData\")) {\r",
							"  \r",
							"    let badMockData = [\r",
							"     {  //utan ISBN, index 0\r",
							"          \"title\": \"Ettan på rymmen\",\r",
							"          \"description\": \"Integer tincidunt ante vel ipsum. Praesent blandit lacinia erat. Vestibulum sed magna tempus sit amet, sem.\",\r",
							"          \"pages\": \"3500\", \r",
							"          \"price\": \"400\"\r",
							"        },\r",
							"       //dubblett ISDN, ej unikt alltså. index 1\r",
							"        { \"ISBN_nr\": \"335339993-3\",\r",
							"            \"title\": \"Tvån hoppade jag över\",\r",
							"            \"description\": \"Integer tincidunt ante vel ipsum. Praesent blandit lacinia erat. Vestibulum sed magna at nunc commodo placerat.\\n\\nPraesent blandit. Nam nulla. Integer pede justo, lacinia eget, tincidunt eget, tempus vel, pede.\\n\\nMorbi porttitor lorem id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\",\r",
							"            \"pages\": \"4980\",\r",
							"            \"price\": \"1571.77\"\r",
							"        }, \r",
							"        { //utan pris index 2\r",
							"        \"ISBN_nr\": \"819485033-1\", \r",
							"        \"title\": \"Tre kan man inte leka\", \r",
							"        \"description\": \"Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 350\r",
							"        },\r",
							"      \r",
							"        //utan titel index 3\r",
							"        { \"ISBN_nr\": \"749485033-X\", \r",
							"        \"description\": \"4Commodo placerat.\\n\\nPraesent blandit. Nam nulla. Integer pede justo, lacinia eget, tincidunt eget, tempus vel, pede.\\n\\nMorbi porttitor lorem id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\",\r",
							"         \"pages\": 4252, \r",
							"         \"price\": 4000\r",
							"      },\r",
							"\r",
							"        // ISBN utan controllnr index 4\r",
							"        { \"ISBN_nr\": \"9173359099\", \r",
							"        \"title\": \"Fem laxar i en laxtunna\", \r",
							"        \"description\": \"Integer tincidunt ante vel ipsum. Praesent blandit lacinia erat. Vestibulum sed id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 444, \r",
							"        \"price\": 2222},\r",
							"\r",
							"        //ISBN som är väldigt långt, index 5\r",
							"        { \"ISBN_nr\": \"9414141414141414141414141413\", \r",
							"        \"title\": \"Femtusen saxar i en laxtunna\", \r",
							"        \"description\": \"Integer tincidunt ante vel ipsum. Praesent blandit lacinia erat. Vestibulum sed id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 444, \r",
							"        \"price\": 2222},\r",
							"\r",
							"        //Pages with decimal,  index 6\r",
							"        { \"ISBN_nr\": \"9414141\", \r",
							"        \"title\": \"sju sjösjuka skepp\", \r",
							"        \"description\": \"Integer tincidunt ante vel ipsum. Praesent blandit lacinia erat. Vestibulum sed id ligula. Suspendisse ornare consequat lectus. In est risus, auctor sed, tristique in, tempus sit amet, sem.\", \r",
							"        \"pages\": 444.5, \r",
							"        \"price\": 2222},\r",
							"\r",
							"];\r",
							"    pm.environment.set(\"counter\", 0);\r",
							"    pm.environment.set(\"badMockData\", JSON.stringify(badMockData));\r",
							" }\r",
							"\r",
							" // Reading/parsing environment variables back to local variables\r",
							" let counter = pm.environment.get(\"counter\") / 1;\r",
							" let badMockData = JSON.parse(pm.environment.get(\"badMockData\"));\r",
							" let {ISBN_nr,title,description,pages,price} = badMockData[counter]\r",
							" // Save to environemnt for use in query\r",
							" pm.environment.set('ISBN_nr', ISBN_nr);\r",
							" pm.environment.set('title', title);\r",
							" pm.environment.set('description', description);\r",
							" pm.environment.set('pages', pages);\r",
							" pm.environment.set('price', price);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ISBN_nr\": \"{{ISBN_nr}}\",\r\n  \"title\": \"{{title}}\",\r\n  \"description\": \"{{description}}\",\r\n  \"pages\": \"{{pages}}\",\r\n  \"price\": \"{{price}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books"
					]
				},
				"description": "6 correct 2 bad"
			},
			"response": []
		},
		{
			"name": "GET BOOKS negative test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bf3b012f-5a0f-4ae1-a3d3-74ede63f3410",
						"exec": [
							"// Reading/parsing environment variables back to local variables\r",
							" let counter = pm.environment.get(\"counter\") / 1;\r",
							" let badMockData = JSON.parse(pm.environment.get(\"badMockData\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "198311a5-8266-44fa-a036-01684dcaf248",
						"exec": [
							"let response = pm.response.json();\r",
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let badMockData = JSON.parse(pm.environment.get(\"badMockData\"));\r",
							"\r",
							"let {id}=badMockData[counter];\r",
							"\r",
							"if(counter===0){\r",
							"let noISBN=badMockData[counter].title\r",
							"let expectedFalse=response.some(x=>x.title===noISBN)\r",
							"\r",
							"//BUGG I API\r",
							"pm.test('Lack of ISBN should be rejected', function (){\r",
							"    try { pm.expect(expectedFalse, 'BUGG!! Sorry we found data with missing ISBN-nr in the db').to.be.false}\r",
							"    catch(err) {\r",
							"        pm.environment.set(\"id\",id);\r",
							"        throw new Error('BUGG!! Sorry we found data with missing ISBN-nr in the db')\r",
							"    }\r",
							"});\r",
							"}\r",
							"\r",
							"if(counter===1){\r",
							"let notUniqueISBN=badMockData[counter].title\r",
							"let expectedFalseReply=response.some(x=>x.title===notUniqueISBN)\r",
							"\r",
							"pm.test('Not unique ISBN should be rejected', function (){\r",
							"    try{pm.expect(expectedFalseReply, 'Sorry we found a non unique ISBN i the db').to.be.false;}\r",
							"\r",
							"    catch(err){\r",
							"        pm.environment.set(\"id\",id);\r",
							"        throw new Error(\"Sorry we found a non unique ISBN i the db.\")\r",
							"    }\r",
							"});\r",
							"}\r",
							"\r",
							"//BUGG I API\r",
							"if(counter===2){\r",
							"let noPrice=badMockData[counter].title;\r",
							"let expectedFalseReply=response.some(x=>x.title===noPrice);\r",
							"\r",
							"pm.test('Absense price should be rejected', function (){\r",
							"    try {pm.expect(expectedFalseReply, 'BUGG!!! Sorry we found data without price in the db').to.be.false;}\r",
							"    catch(err) {\r",
							"       pm.environment.set(\"id\",id);\r",
							"        throw new Error('BUGG!!! Sorry we found data without price in the db')\r",
							"    }\r",
							"});\r",
							"}\r",
							"\r",
							"if(counter===3){\r",
							"let noTitle=badMockData[counter].ISBN_nr;\r",
							"let expectedFalseReply=response.some(x=>x.ISBN_nr===noTitle);\r",
							"\r",
							"pm.test('No title should be rejected', function (){\r",
							"    try {pm.expect(expectedFalseReply, 'Sorry we found data without title in the db').to.be.false;}\r",
							"    catch(err) {\r",
							"        pm.environment.set(\"id\", id);\r",
							"        throw new Error('Sorry we found data without title in the db')\r",
							"    }\r",
							"});\r",
							"}\r",
							"\r",
							"//TO DISCUSS - is it a BUGG?\r",
							"if(counter===4){\r",
							"let noControllDigit=badMockData[counter].title\r",
							"let expectedFalseReply=response.some(x=>x.title===noControllDigit)\r",
							"\r",
							"\r",
							"pm.test('Lack of ISBN-control digit should be rejected', function (){\r",
							"    try { pm.expect(expectedFalse, 'Sorry we found data with without control digit for ISBN').to.be.false}\r",
							"    catch(err) {\r",
							"        pm.environment.set(\"id\",id);\r",
							"        throw new Error('BUGG sorry we found data with without control digit for ISBN')\r",
							"    }\r",
							"});\r",
							"}\r",
							"\r",
							"//BUGG??\r",
							"if(counter===5){\r",
							"let toLongISBN=badMockData[counter].title\r",
							"let expectedFalseReply=response.some(x=>x.title===toLongISBN)\r",
							"\r",
							"\r",
							"pm.test('To long ISBN should not be in the db', function (){\r",
							"    try { pm.expect(expectedFalse, 'Sorry we found data with with to long ISBN').to.be.false}\r",
							"    catch(err) {\r",
							"        pm.environment.set(\"id\",id);\r",
							"        throw new Error('BUGG sorry we found data with to long ISBN')\r",
							"    }\r",
							"});\r",
							"}\r",
							"\r",
							"//BUGG??\r",
							"if(counter===6){\r",
							"let pagesWithDecimal=badMockData[counter].title\r",
							"let expectedFalseReply=response.some(x=>x.title===pagesWithDecimal)\r",
							"\r",
							"\r",
							"pm.test('To long ISBN should not be in the db', function (){\r",
							"    try { pm.expect(expectedFalse, 'Sorry we found data with with pages as decimals').to.be.false}\r",
							"    catch(err) {\r",
							"        pm.environment.set(\"id\",id);\r",
							"        throw new Error('BUGG Sorry we found data with with pages as decimals')\r",
							"    }\r",
							"});\r",
							"}\r",
							"\r",
							"\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(badMockData[counter]){\r",
							"    postman.setNextRequest('GET BOOKS negative test');\r",
							"}\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0); } \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE BOOKS negative test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "503befde-9fd5-4049-ad70-a7b6aba1f854",
						"exec": [
							"// Reading/parsing environment variables back to local variables\r",
							" let counter = pm.environment.get(\"counter\") / 1;\r",
							" let badMockData = JSON.parse(pm.environment.get(\"badMockData\"));\r",
							"\r",
							"let {id}=badMockData[counter]\r",
							"if(id!==undefined&&id!==null){\r",
							"    pm.environment.set(\"id\",id)\r",
							"    }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ed7abc47-3ded-4ec4-9fc3-709a4adede83",
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"// Reading/parsing environment variables back to local variables\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let badMockData = JSON.parse(pm.environment.get(\"badMockData\"));\r",
							"\r",
							"pm.test(\"Correct status\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							" pm.test('The respons should either be 0 or 1 changes', function(){\r",
							"        pm.expect(response.changes).to.be.oneOf([1,0]);\r",
							"    });\r",
							"\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(badMockData[counter]){\r",
							"    postman.setNextRequest('DELETE BOOKS negative test');\r",
							"}\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0); } \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/books/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET BOOKS neg after delete",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a802be8e-e456-41a9-9295-1af17ac0b857",
						"exec": [
							"// Reading/parsing environment variables back to local variables\r",
							" let counter = pm.environment.get(\"counter\") / 1;\r",
							" let badMockData = JSON.parse(pm.environment.get(\"badMockData\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1fe5547f-2dc0-4dc2-8f35-26dc09df485e",
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let badMockData = JSON.parse(pm.environment.get(\"badMockData\"));\r",
							"\r",
							"let current=badMockData[counter]\r",
							"pm.test('The data in db should not have the new mockdata any longer', function(){\r",
							"    pm.expect(response).to.not.deep.include(current);\r",
							"});\r",
							"\r",
							"// Increment the counter and save to environment\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"// Run request again if more mockdata\r",
							"if(badMockData[counter]){\r",
							"    postman.setNextRequest('GET BOOKS neg after delete');\r",
							"}\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0); } \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"books"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4a4c8345-b035-4ca2-a1df-3517b2ea2caf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "da9f37fa-9e31-4331-9ca6-bc1e37e50a1b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "2c3da98a-4976-4cd3-adb8-ce880fbf2cfa",
			"value": "",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}