{
	"info": {
		"_postman_id": "c68d56c5-f4e0-4694-89c4-87add216b7d7",
		"name": "Writers",
		"description": "Different test for writers in bookstore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET-writers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bc7d99f0-aa1a-4376-a41e-bc60362ef86e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3bca5094-720e-40e7-9a86-fec674e03650",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/writers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"writers"
					]
				},
				"description": "Using GET to get all writers"
			},
			"response": []
		},
		{
			"name": "POST-writers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fd050733-b791-4a2d-ad3f-9f9006f69283",
						"exec": [
							"if(!pm.environment.has(\"fakeData\")){\r",
							"    let fakeData=[\r",
							"        {\r",
							"        \"name\": \"PC Cast\", \r",
							"        \"description\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ipsum orci, semper vel pretium quis, suscipit et metus. Integer convallis leo nec metus malesuada, malesuada.\"\r",
							"        },\r",
							"        {\r",
							"        \"name\": \"Jenny Colgan\", \r",
							"        \"description\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut sit amet augue et tortor malesuada egestas. Etiam cursus lectus at metus elementum accumsan. Proin maximus.\"\r",
							"        },\r",
							"        {\r",
							"        \"name\": \"Mitek Grocher\", \r",
							"        \"description\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec lectus eleifend, venenatis risus eu, mollis arcu. Nam sodales lacus vel placerat posuere. Duis interdum.\"\r",
							"        },\r",
							"        {\r",
							"        \"name\": \"HP Lovecraft\", \r",
							"        \"description\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus volutpat suscipit imperdiet. Proin vehicula efficitur purus eu bibendum. Curabitur consequat risus augue. Praesent a venenatis.\"\r",
							"        },\r",
							"        {\r",
							"        \"name\": \"Sir Arthur Conan Doyle\", \r",
							"        \"description\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis elit neque, consectetur nec finibus eget, varius et tellus. Morbi fringilla risus eu diam auctor, vel.\"\r",
							"        }\r",
							"    ]; \r",
							"    pm.environment.set(\"counter\", 0);\r",
							"    pm.environment.set(\"fakeData\", JSON.stringify(fakeData));\r",
							"\r",
							"}\r",
							"\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let fakeData = JSON.parse(pm.environment.get(\"fakeData\"));\r",
							"let {name, description} = fakeData[counter]\r",
							"\r",
							"pm.environment.set('name', name);\r",
							"pm.environment.set('description', description);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "422e20d0-8639-46b2-8599-15a6a98d2073",
						"exec": [
							"let response = pm.response.json();\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let fakeData = JSON.parse(pm.environment.get(\"fakeData\"));\r",
							"\r",
							"fakeData[counter].id = response.insertId;\r",
							"pm.environment.set('fakeData', JSON.stringify(fakeData));\r",
							"\r",
							"pm.test(\"Something in the response\", function () {\r",
							"    pm.expect(response).to.not.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct status\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"if(fakeData[counter]){\r",
							"    postman.setNextRequest('POST-writers')\r",
							"}\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"{{name}}\", \n\t\"description\": \"{{description}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/writers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"writers"
					]
				},
				"description": "Posting some writers"
			},
			"response": []
		},
		{
			"name": "PUT-writers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6fabbb00-8b9f-42ac-990a-958673b8a4b1",
						"exec": [
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let fakeData = JSON.parse(pm.environment.get(\"fakeData\"));\r",
							"let id = fakeData[counter].id;\r",
							"\r",
							"fakeData.map(x=>x.name='Albert Einstein');\r",
							"\r",
							"let {name,description} = fakeData[counter]\r",
							"\r",
							"pm.environment.set('id',id);\r",
							"pm.environment.set('name',name);    \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aa891dbb-e39a-4229-852d-328f8c3c945b",
						"exec": [
							"let response = pm.response.json();\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let fakeData = JSON.parse(pm.environment.get(\"fakeData\"));\r",
							"let id=pm.environment.get(\"id\");\r",
							"\r",
							"console.log(fakeData.name);\r",
							"pm.test(\"Response is correct\", function () {\r",
							"    pm.expect(response).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"\r",
							"if(fakeData[counter]){\r",
							"    postman.setNextRequest('PUT-writers');\r",
							"}\r",
							"\r",
							"else {\r",
							"  pm.environment.set(\"counter\", 0); } "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"{{name}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/writers/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"writers",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET-new writers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "92bf8634-84a7-4cc4-b9c3-fe0ed54725a0",
						"exec": [
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let fakeData = JSON.parse(pm.environment.get(\"fakeData\"));\r",
							"let {id} = fakeData[counter];\r",
							"\r",
							"pm.environment.set('id', id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "156eb4ac-ffa7-4349-a1e7-743e303ddf4e",
						"exec": [
							"\r",
							"let response = pm.response.json();\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let fakeData = JSON.parse(pm.environment.get(\"fakeData\"));\r",
							"let id=response.id;\r",
							"\r",
							"\r",
							"console.log(response.id);\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"if(fakeData[counter]){\r",
							"    postman.setNextRequest('GET-new writers');\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/writers/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"writers",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE-writers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6f002944-d61d-49b1-a8cf-1ed9c63a9393",
						"exec": [
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let fakeData = JSON.parse(pm.environment.get(\"fakeData\"));\r",
							"let {id} = fakeData[counter]\r",
							"\r",
							"pm.environment.set(\"id\",id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "84f8b40e-864b-48a7-bcff-3d13bd39f7fa",
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"let counter = pm.environment.get(\"counter\") / 1;\r",
							"let fakeData = JSON.parse(pm.environment.get(\"fakeData\"));\r",
							"let id=pm.environment.get(\"id\");\r",
							"\r",
							"\r",
							"pm.test(\"Response is correct\", function () {\r",
							"    pm.expect(response).to.exist;\r",
							"});\r",
							"\r",
							"counter++;\r",
							"pm.environment.set('counter', counter);\r",
							"\r",
							"\r",
							"if(fakeData[counter]){\r",
							"    postman.setNextRequest('DELETE-writers');\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/writers/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"writers",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a599c8f2-a25b-4f23-ac9c-7b16c3d844fe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "99b9ffd1-f89e-4775-b947-45f8e96960c7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}